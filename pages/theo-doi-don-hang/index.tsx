import { Badge, Grid, Pagination } from "@mui/material";
import Head from "next/head";
import { useRouter } from "next/router";
import React, { useEffect, useState } from "react";
import { myOrders } from "../../apis/order";
import { AccountLayout } from "../../layouts";
import { MSG_SUCCESS } from "../../utils/constants";
import {
  Order,
  OrderItem,
  ResponseItems,
  Variant,
  VariantValue,
} from "../../utils/types";
import styles from "../../styles/FollowOrder.module.css";
import Image from "next/image";
import { formatDateTime, getThumbnailOrderItem } from "../../utils/helpers";

const LIMIT = 10;

type Props = {};

type OrderProps = {
  order?: Order;
};

type OrderItemProps = {
  item?: OrderItem;
};

const Item = (props: OrderItemProps) => {
  return props.item ? (
    <>
      <Image
        width={100}
        height={120}
        src={getThumbnailOrderItem(props.item)}
        alt="thumbnail"
        priority={true}
      />
      <div className={styles.product}>
        <div className={styles.name}>{props.item.product?.name}</div>
        {props.item.productVariant?.variantValues?.map(
          (variantValue: VariantValue) => {
            return (
              <div
                className={styles.variantValue}
                key={`${props.item?.productVariantId} - ${variantValue.id}`}
              >
                {variantValue.variant?.name}: {variantValue.value}
              </div>
            );
          }
        )}
        <div className={styles.quantity}>Số lượng: {props.item.quantity}</div>
        <div className={styles.price}>{props.item.price}</div>
      </div>
    </>
  ) : null;
};

const MyOrder = (props: OrderProps) => {
  const total = props.order?.items.reduce(
    (p: number, c: OrderItem) => p + c.quantity * c.price,
    0
  );
  return props.order ? (
    <div className={styles.order}>
      <div className={styles.title}>
        <div className={styles.left}>
          <div>
            Đơn hàng {props.order.id} - {props.order.status}
          </div>
          <div>Ngày: {formatDateTime(props.order.createdAt)}</div>
          <div>Họ tên: {props.order.fullName}</div>
          <div>Điện thoại: {props.order.phone}</div>
          <div>
            Địa chỉ: {props.order.address}, {props.order.ward},{" "}
            {props.order.district}, {props.order.province}
          </div>
        </div>
        <div className={styles.right}>
          <div className={styles.row}>
            <span>Giá gốc: </span>
            <span>{total}</span>
          </div>
          <div className={styles.row}>
            <span>Giảm giá: </span>
            <span>0đ</span>
          </div>
          <div className={styles.row}>
            <span>Tổng cộng: </span>
            <span>{total}</span>
          </div>
          <div>
            <button
              className={styles.btn}
              disabled={props.order.status !== "Đang xử lý"}
            >
              Hủy
            </button>
          </div>
        </div>
      </div>
      <ul className={styles.items}>
        {props.order.items.map((item: OrderItem) => {
          return (
            <li
              className={styles.item}
              key={`${props.order?.id} - ${item.productVariantId}`}
            >
              <Item item={item} />
            </li>
          );
        })}
      </ul>
    </div>
  ) : null;
};

const FollowOrder = (props: Props) => {
  const router = useRouter();
  const [orderData, setOrderData] = useState<ResponseItems<Order>>({
    items: [],
    count: 0,
  });

  const handleChange = (p: number) => {
    const paramsObj: any = { ...router.query };
    if (p > 1) {
      paramsObj.p = p;
    } else {
      delete paramsObj.p;
    }
    const searchParams: string = new URLSearchParams(paramsObj).toString();
    router.push(`${window.location.pathname}?${searchParams}`);
  };

  useEffect(() => {
    (async () => {
      try {
        const { message, data } = await myOrders({
          ...router.query,
          limit: LIMIT,
        });
        if (message === MSG_SUCCESS) {
          setOrderData(data);
        }
      } catch (error) {
        console.log(error);
      }
    })();
  }, [router.query]);

  return (
    <AccountLayout titleHeading="Đơn hàng của tôi">
      <>
        <Head>
          <title>Đơn hàng của tôi</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
      </>
      <Grid container columnSpacing={2} rowSpacing={2}>
        {orderData.items.map((order: Order) => {
          return (
            <Grid item xs={12} key={order.id}>
              <MyOrder order={order} />
            </Grid>
          );
        })}
        {orderData.count > 0 ? (
          <Grid item xs={12}>
            <Pagination
              count={Math.ceil(orderData.count / LIMIT)}
              sx={{ ul: { justifyContent: "center" } }}
              variant="outlined"
              shape="rounded"
              showLastButton
              showFirstButton
              page={router.query && router.query.p ? +router.query.p : 1}
              onChange={(e, page) => handleChange(page)}
            />
          </Grid>
        ) : null}
      </Grid>
    </AccountLayout>
  );
};

export default FollowOrder;
