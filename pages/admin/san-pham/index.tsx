import CheckIcon from "@mui/icons-material/Check";
import ClearIcon from "@mui/icons-material/Clear";
import { Button } from "@mui/material";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/router";
import { useState } from "react";
import { getAllProducts } from "../../../apis/product";
import {
  DataManagement,
  ModalProductVariant,
  ModalProductVariantImage,
} from "../../../components";
import { AdminLayout } from "../../../layouts";
import { MSG_SUCCESS } from "../../../utils/constants";
import { formatDateTime } from "../../../utils/helpers";
import { Product, ResponseItems } from "../../../utils/types";
type Props = {
  productData: ResponseItems<Product>;
};
const LIMIT = 10;
const Products = (props: Props) => {
  const router = useRouter();
  const { p } = router.query;
  const [openModalPVI, setModalPVI] = useState<boolean>(false);
  const [openModalPV, setModalPV] = useState<boolean>(false);
  const [product, setProduct] = useState<Product>();
  const [productData, setProductData] = useState<ResponseItems<Product>>(
    props.productData
  );
  const handleCloseModalPV = () => {
    setModalPV(false);
  };
  const handleCloseModalPVI = () => {
    setModalPVI(false);
  };
  const handleOpenModalPVI = (row: Product) => {
    setProduct(row);
    setModalPVI(true);
  };
  const handleOpenModalPV = (row: Product) => {
    setProduct(row);
    setModalPV(true);
  };
  const handleUploadThumbnail = (id: number, thumbnail: string) => {
    setProductData({
      ...productData,
      items: productData.items.map((p: Product) =>
        p.id === id ? { ...p, thumbnail } : p
      ),
    });
  };
  return (
    <AdminLayout pageTitle="Sản phẩm">
      <>
        <Head>
          <title>Quản lý sản phẩm</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <DataManagement
          paperTitle="Danh sách sản phẩm"
          rows={productData.items}
          count={productData.count}
          limit={LIMIT}
          hasCheck={true}
          sortBys={[
            {
              display: "Tên",
              value: "name",
            },
            {
              display: "Bí danh",
              value: "slug",
            },
          ]}
          columns={[
            {
              style: { width: 70, textAlign: "center" },
              display: "#",
              key: "index",
            },
            {
              style: { textAlign: "left" },
              key: "name",
              display: "Tên sản phẩm",
              render: (row: Product) => (
                <div
                  style={{ display: "flex", alignItems: "center", gap: "16px" }}
                >
                  <div>
                    <Image
                      alt=""
                      width={72}
                      height={72}
                      priority={true}
                      src={row.thumbnail}
                    />
                  </div>
                  {row.name}
                </div>
              ),
            },
            {
              style: { textAlign: "left" },
              key: "slug",
              display: "Bí danh",
            },
            {
              style: { textAlign: "left", width: 200 },
              key: "groupProduct",
              display: "Nhóm sản phẩm",
              render: (row: Product) => row.groupProduct?.name,
            },
            {
              style: { textAlign: "center", width: 110 },
              key: "productVariantImages",
              display: "Hình ảnh",
              render: (row: Product) => (
                <Button onClick={() => handleOpenModalPVI(row)}>
                  Thiết lập
                </Button>
              ),
            },
            {
              style: { textAlign: "center", width: 110 },
              key: "productVariants",
              display: "Biến thể",
              render: (row: Product) => (
                <Button onClick={() => handleOpenModalPV(row)}>
                  Thiết lập
                </Button>
              ),
            },
            {
              style: { width: 120, textAlign: "center" },
              key: "createdAt",
              display: "Ngày tạo",
              render: (row: Product) => formatDateTime(row.createdAt),
            },
            {
              style: { width: 90, textAlign: "center" },
              key: "isVisible",
              display: "Hiển thị",
              render: (row: Product) =>
                row.isVisible ? (
                  <CheckIcon style={{ color: "#33eb91" }} />
                ) : (
                  <ClearIcon style={{ color: "#00695f" }} />
                ),
            },
            {
              style: { width: 100 },
              key: "actions",
              render: (row: Product) => (
                <div style={{ display: "flex", alignItems: "center" }}>
                  <Link href={`/admin/san-pham/${row.id}/sua`}>
                    <button className="btnEdit">Sửa</button>
                  </Link>
                  <button className="btnDelete" style={{ marginLeft: "8px" }}>
                    Xóa
                  </button>
                </div>
              ),
            },
          ]}
        />
        {openModalPVI ? (
          <ModalProductVariantImage
            open={openModalPVI}
            onClose={handleCloseModalPVI}
            product={product}
            onUpdateThumbnail={handleUploadThumbnail}
          />
        ) : null}
        {openModalPV ? (
          <ModalProductVariant
            open={openModalPV}
            onClose={handleCloseModalPV}
            product={product}
          />
        ) : null}
      </>
    </AdminLayout>
  );
};

export default Products;

export async function getServerSideProps(context: any) {
  const { p, sort_by, sort_type } = context.query;
  const res = await getAllProducts({
    p: p || 1,
    limit: LIMIT,
    sort_by,
    sort_type,
  });
  const { message, data } = res;
  return message === MSG_SUCCESS
    ? {
        props: { productData: data },
      }
    : {
        notFound: true,
      };
}
