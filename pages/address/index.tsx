import { Button } from "@mui/material";
import Head from "next/head";
import React, { useState, useEffect } from "react";
import { deleteUserAddress, getMyUserAddresses } from "../../apis/useraddress";
import { ConfirmDialog, ModalUserAddress } from "../../components";
import { AccountLayout } from "../../layouts";
import { MSG_SUCCESS } from "../../utils/constants";
import { UserAddress } from "../../utils/types";
import AddIcon from "@mui/icons-material/Add";
import { useSnackbarContext } from "../../context/SnackbarContext";

type Props = {};

const AddressList = (props: Props) => {
  const [userAddresses, setUserAddresses] = useState<UserAddress[]>([]);
  const [openModal, setOpenModal] = useState<boolean>(false);
  const [current, setCurrent] = useState<UserAddress | null>(null);
  const [openDialog, setOpenDialog] = useState<boolean>(false);
  const { show } = useSnackbarContext();

  const handleCreate = (data: UserAddress) => {
    setUserAddresses([data, ...userAddresses]);
    setOpenModal(false);
    show("Thêm địa chỉ thành công", "success");
  };

  const handleClickEdit = (userAddress: UserAddress) => {
    setCurrent(userAddress);
    setOpenModal(true);
  };

  const handleEdit = (id: number, newUserAddress: UserAddress) => {
    setUserAddresses(
      userAddresses.map((userAddress: UserAddress) =>
        userAddress.id === id
          ? Object.assign(userAddress, newUserAddress)
          : userAddress
      )
    );
    setOpenModal(false);
  };

  const handleClickDelete = async (userAddress: UserAddress) => {
    setCurrent(userAddress);
    setOpenDialog(true);
  };

  const handleDelete = async () => {
    if (current) {
      try {
        const { message } = await deleteUserAddress(current.id);
        if (message === MSG_SUCCESS) {
          setUserAddresses(
            [...userAddresses].filter(
              (userAddress: UserAddress) => userAddress.id !== current.id
            )
          );
          show("Xóa địa chỉ thành công", "success");
        }
      } catch (error) {
        console.log("DELETE USER ADDRESS ERROR", error);
      }
    }
  };

  useEffect(() => {
    const fetchUserAddresses = async () => {
      try {
        const { message, data } = await getMyUserAddresses();
        if (message === MSG_SUCCESS) {
          setUserAddresses(data.items);
        }
      } catch (error) {
        console.log("FETCH USER ADDRESS ERROR", error);
      }
    };

    fetchUserAddresses();
  }, []);

  return (
    <AccountLayout titleHeading="Sổ địa chỉ">
      <>
        <Head>
          <title>Sổ địa chỉ</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
      </>
      <main>
        <Button
          variant="contained"
          onClick={() => setOpenModal(true)}
          sx={{ mb: 2 }}
          startIcon={<AddIcon />}
        >
          Thêm địa chỉ mới
        </Button>
        {userAddresses.length > 0 ? (
          <table className="table">
            <thead>
              <tr>
                <th>#</th>
                <th style={{ textAlign: "left" }}>Địa chỉ</th>
                <th style={{ width: "100px" }}></th>
              </tr>
            </thead>
            <tbody>
              {userAddresses.map((userAddress: UserAddress, index: number) => {
                return (
                  <tr key={userAddress.id}>
                    <td style={{ textAlign: "center" }}>{index + 1}</td>
                    <td>
                      {userAddress.address},&nbsp;{userAddress.ward},&nbsp;
                      {userAddress.district},&nbsp;{userAddress.province}
                    </td>
                    <td>
                      <div style={{ display: "flex", alignItems: "center" }}>
                        <button
                          className="btnEdit"
                          onClick={() => handleClickEdit(userAddress)}
                        >
                          Sửa
                        </button>
                        <button
                          className="btnDelete"
                          style={{ marginLeft: "8px" }}
                          onClick={() => handleClickDelete(userAddress)}
                        >
                          Xóa
                        </button>
                      </div>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        ) : null}
        {openDialog ? (
          <ConfirmDialog
            open={openDialog}
            onClose={() => setOpenDialog(false)}
            title="Xác nhận"
            text="Bạn có chắc chắn xóa địa chỉ này?"
            onConfirm={handleDelete}
          />
        ) : null}
        {openModal ? (
          <ModalUserAddress
            open={openModal}
            onClose={() => setOpenModal(false)}
            onCreate={handleCreate}
            onEdit={handleEdit}
            row={current}
          />
        ) : null}
      </main>
    </AccountLayout>
  );
};

export default AddressList;
