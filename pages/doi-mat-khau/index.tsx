import Head from "next/head";
import { useRef } from "react";
import { useAuthContext } from "../../context/AuthContext";
import { AccountLayout } from "../../layouts";
import { useForm, SubmitHandler } from "react-hook-form";
import {
  ChangeProfile,
  changePassword as apiChangePassword,
  ChangePassword,
} from "../../apis/auth";
import styles from "../../styles/Profile.module.css";
import { MSG_SUCCESS } from "../../utils/constants";
import { useSnackbarContext } from "../../context/SnackbarContext";

type Props = {};

type ChangePasswordInputs = ChangePassword & {
  reTypePassword: string;
};

const ChangePassword = (props: Props) => {
  const { profile } = useAuthContext();
  const { show } = useSnackbarContext();
  const {
    register,
    handleSubmit,
    watch,
    formState: { errors },
  } = useForm<ChangePasswordInputs>();
  const password = useRef({});
  password.current = watch("newPassword", "");
  const onSubmit: SubmitHandler<ChangePasswordInputs> = async (data) => {
    try {
      const res = await apiChangePassword({
        oldPassword: data.oldPassword,
        newPassword: data.newPassword,
      });
      const { message, data: _data } = res;
      if (message === MSG_SUCCESS) {
        show("Đổi mật khẩu thành công", "success");
      }
    } catch (error) {
      console.log(error);
    }
  };
  return profile ? (
    <AccountLayout titleHeading="Đổi mật khẩu">
      <>
        <Head>
          <title>Đổi mật khẩu</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <form className={styles.form} onSubmit={handleSubmit(onSubmit)}>
          <div className="form-group">
            {errors.oldPassword && errors.oldPassword.type === "required" && (
              <div className="form-error">
                Mật khẩu hiện tại không được bỏ trống
              </div>
            )}
            <input
              type="password"
              className="form-control"
              {...register("oldPassword", {
                required: true,
              })}
            />
            <label htmlFor="" className="form-label required">
              Mật khẩu hiện tại
            </label>
          </div>
          <div className="form-group">
            {errors.newPassword && errors.newPassword.type === "required" && (
              <div className="form-error">Mật khẩu mới không được bỏ trống</div>
            )}
            <input
              type="password"
              className="form-control"
              {...register("newPassword", { required: true })}
            />
            <label htmlFor="" className="form-label required">
              Mật khẩu mới
            </label>
          </div>
          <div className="form-group">
            {errors.reTypePassword &&
              errors.reTypePassword.type === "validate" && (
                <div className="form-error">Nhập lại mật khẩu không đúng</div>
              )}
            <input
              type="password"
              className="form-control"
              {...register("reTypePassword", {
                validate: (value) =>
                  value === password.current || "The passwords do not match",
              })}
            />
            <label htmlFor="" className="form-label required">
              Nhập lại mật khẩu mới
            </label>
          </div>
          <div>
            <button type="submit" className={styles.btn}>
              Cập nhật
            </button>
          </div>
        </form>
      </>
    </AccountLayout>
  ) : null;
};

export default ChangePassword;
