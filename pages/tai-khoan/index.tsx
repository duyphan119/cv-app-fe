import Head from "next/head";
import React from "react";
import { useAuthContext } from "../../context/AuthContext";
import { AccountLayout } from "../../layouts";
import { useForm, SubmitHandler } from "react-hook-form";
import {
  ChangeProfile,
  changeProfile as apiChangeProfile,
} from "../../apis/auth";
import styles from "../../styles/Profile.module.css";
import { MSG_SUCCESS } from "../../utils/constants";
import { useSnackbarContext } from "../../context/SnackbarContext";

type Props = {};

const Profile = (props: Props) => {
  const { profile, changeProfile } = useAuthContext();
  const { show } = useSnackbarContext();
  const {
    register,
    handleSubmit,
    watch,
    formState: { errors },
  } = useForm<ChangeProfile>();
  const onSubmit: SubmitHandler<ChangeProfile> = async (data) => {
    try {
      const res = await apiChangeProfile(data);
      console.log(data, res);
      const { message, data: _data } = res;
      if (message === MSG_SUCCESS) {
        changeProfile(_data);
        show("Cập nhật thành công", "success");
      }
    } catch (error) {
      console.log(error);
    }
  };
  return profile ? (
    <AccountLayout titleHeading="Thông tin tài khoản">
      <>
        <Head>
          <title>Thông tin tài khoản</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <form className={styles.form} onSubmit={handleSubmit(onSubmit)}>
          <div className="form-group">
            {errors.email && errors.email.type === "pattern" && (
              <div className="form-error">Địa chỉ email không hợp lệ</div>
            )}
            {errors.email && errors.email.type === "required" && (
              <div className="form-error">Email không được bỏ trống</div>
            )}
            <input
              type="text"
              className="form-control"
              defaultValue={profile.email}
              {...register("email", {
                pattern: /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/,
                required: true,
              })}
            />
            <label htmlFor="" className="form-label required">
              Email
            </label>
          </div>
          <div className="form-group">
            {errors.fullName && errors.fullName.type === "required" && (
              <div className="form-error">Họ tên không được bỏ trống</div>
            )}
            <input
              type="text"
              className="form-control"
              defaultValue={profile.fullName}
              {...register("fullName", { required: true })}
            />
            <label htmlFor="" className="form-label required">
              Họ tên
            </label>
          </div>
          <div className="form-group">
            {errors.phone && errors.phone.type === "required" && (
              <div className="form-error">
                Số điện thoại không được bỏ trống
              </div>
            )}
            {errors.phone && errors.phone.type === "minLength" && (
              <div className="form-error">
                Số điện thoại ít nhất có 10 chữ số
              </div>
            )}
            <input
              type="text"
              className="form-control required"
              defaultValue={profile.phone}
              {...register("phone", { required: true, minLength: 10 })}
            />
            <label htmlFor="" className="form-label required">
              Số điện thoại
            </label>
          </div>
          <div>
            <button type="submit" className={styles.btn}>
              Cập nhật
            </button>
          </div>
        </form>
      </>
    </AccountLayout>
  ) : null;
};

export default Profile;
